import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;


public class main {
	public static final int tMin = 35, tMax = 80; // TODO pas deze waarden aan naar iets logisch
    private final static float ALPHA = 0.25f;
    private final static int M = 6; // Width of moving average
	
	
	public static Result findPeaks(List<Double> a) {
		
	    double max = 0;
	    List<Double> peaks = new ArrayList<Double>();
	    List<Integer> indices = new ArrayList<Integer>();
	    
	    int startWindow = 0;
	    int endWindow = startWindow + 30;
	    int delta = 10;                       // Minimum amount of samples between peaks
	    int peakLoc = 0;
	
	    for (int i = 0; i < a.size(); ) {
	
	        for (int j = i; j < endWindow; j++) {
	            if (a.get(j) > max) {
	                max = a.get(j);
	                peakLoc = j;
	            }
	            // max now equals global max within window tMax
	        }
	
	        peaks.add(max);
	        indices.add(peakLoc);
	        max = 0;
	
	        if (peakLoc + delta + 30 >= a.size()) {
	        	Result res = new Result(indices, peaks);
	        	return res;
	        }
	
	        i = peakLoc + delta;     // Minimal possible index for new peak
	        endWindow = i + 30;   // Maximum possible index for new peak
	

	    }
	    Result res = new Result(indices, peaks); 
	    
	    return res;
	}
	
	public static class Result {
		public List<Integer> xValues;
		public List<Double> yValues;
		
		Result(List<Integer> x, List<Double> y) {
			this.xValues = x;
			this.yValues = y;
		}
		
	}

	/* Read in acc data from file */ 
    public static List<Double> Read(String filename) {

        List<Double> values = new ArrayList<Double>();
        	
	    try {
		    Scanner sc = new Scanner(new File(filename));
	        sc.nextLine();
	        while (sc.hasNextLine())    {
	        	String[] data = sc.nextLine().split("\\|"); 	            	
	        	values.add(Double.parseDouble(data[2]));
	        }
	    } catch (IOException e) {
	    	System.out.println("Data file not found.");
	    }           
	    return values;
    } 
	
    /* Use a low-pass filter to avoid random high values caused by noise. Taken from https://www.built.io/blog/2013/05/applying-low-pass-filter-to-android-sensors-readings/ */
    private static float[] lowPass(float[] input, float[] output) {
    	   	
        if (output == null) return input;
        
        //for (int i = 0; i < input.length; i++) {
          //  output[i] = output[i] + ALPHA * (input[i] - output[i]);
        	//output[i] = ALPHA * output[i] + (1 - ALPHA) * input[i];
            
        //}
        
        for (int i = M; i < input.length; i++) {
        	
        	output[i] = 0;
        	for (int k = M; k >= 0; k--) {
        		output[i] += input[i - k];
        	}
        	output[i] = output[i]/M;
        	
        }
        
        
        
        return output;
    }
    
    public static void main(String [] args) throws FileNotFoundException, UnsupportedEncodingException
	{
    	List<Double> data = Read("/home/danielle/AndroidStudioProjects/IN4254-SPS/assignment2/accelerometer_DANI.dat");
    	Result res = findPeaks(data);
    	
    	// Dont look at peaks for now, only check smoothing
    	float[] yOld = new float[data.size()];
    	float[] yNew = new float[data.size()];
    	
    	for (int i = 0; i < yOld.length; i++) {
    		yOld[i] = data.get(i).floatValue();
    	}
    	
    	yNew = lowPass(yOld, yNew);

    	PrintWriter writer = new PrintWriter("smooth.dat", "UTF-8");
    	for (int i = 0; i < 350; i++) {
    		writer.println(yOld[i] + "-" + yNew[i]);
    	}
    	writer.close();
    	
    	
    	System.out.println(res.xValues);
    	System.out.println(res.yValues);
    	
    	
    	
    }
	
}
